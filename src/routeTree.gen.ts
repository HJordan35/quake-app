/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardProfileImport } from './routes/dashboard/profile'
import { Route as DashboardHomeImport } from './routes/dashboard/home'
import { Route as DashboardExploreImport } from './routes/dashboard/explore'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardProfileRoute = DashboardProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardHomeRoute = DashboardHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardExploreRoute = DashboardExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/explore': {
      id: '/dashboard/explore'
      path: '/explore'
      fullPath: '/dashboard/explore'
      preLoaderRoute: typeof DashboardExploreImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/home': {
      id: '/dashboard/home'
      path: '/home'
      fullPath: '/dashboard/home'
      preLoaderRoute: typeof DashboardHomeImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/profile': {
      id: '/dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardProfileImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardExploreRoute: typeof DashboardExploreRoute
  DashboardHomeRoute: typeof DashboardHomeRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardExploreRoute: DashboardExploreRoute,
  DashboardHomeRoute: DashboardHomeRoute,
  DashboardProfileRoute: DashboardProfileRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/explore': typeof DashboardExploreRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/profile': typeof DashboardProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/explore': typeof DashboardExploreRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/profile': typeof DashboardProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/explore': typeof DashboardExploreRoute
  '/dashboard/home': typeof DashboardHomeRoute
  '/dashboard/profile': typeof DashboardProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/explore'
    | '/dashboard/home'
    | '/dashboard/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/explore'
    | '/dashboard/home'
    | '/dashboard/profile'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/explore'
    | '/dashboard/home'
    | '/dashboard/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/explore",
        "/dashboard/home",
        "/dashboard/profile"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/dashboard/explore": {
      "filePath": "dashboard/explore.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/home": {
      "filePath": "dashboard/home.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/profile": {
      "filePath": "dashboard/profile.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
